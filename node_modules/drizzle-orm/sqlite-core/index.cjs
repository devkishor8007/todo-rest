'use strict';

var alias$1 = require('../alias-5f56ec1f.cjs');
var uniqueConstraint = require('../unique-constraint-4d747c41.cjs');

function alias(table, alias) {
    return new Proxy(table, new alias$1.TableAliasProxyHandler(alias, false));
}

function getTableConfig(table) {
    const columns = Object.values(table[uniqueConstraint.SQLiteTable.Symbol.Columns]);
    const indexes = [];
    const checks = [];
    const primaryKeys = [];
    const foreignKeys = Object.values(table[uniqueConstraint.SQLiteTable.Symbol.InlineForeignKeys]);
    const name = table[alias$1.Table.Symbol.Name];
    const extraConfigBuilder = table[uniqueConstraint.SQLiteTable.Symbol.ExtraConfigBuilder];
    if (extraConfigBuilder !== undefined) {
        const extraConfig = extraConfigBuilder(table[uniqueConstraint.SQLiteTable.Symbol.Columns]);
        for (const builder of Object.values(extraConfig)) {
            if (alias$1.is(builder, uniqueConstraint.IndexBuilder)) {
                indexes.push(builder.build(table));
            }
            else if (alias$1.is(builder, uniqueConstraint.CheckBuilder)) {
                checks.push(builder.build(table));
            }
            else if (alias$1.is(builder, uniqueConstraint.PrimaryKeyBuilder)) {
                primaryKeys.push(builder.build(table));
            }
            else if (alias$1.is(builder, uniqueConstraint.ForeignKeyBuilder)) {
                foreignKeys.push(builder.build(table));
            }
        }
    }
    return {
        columns,
        indexes,
        foreignKeys,
        checks,
        primaryKeys,
        name,
    };
}
function getViewConfig(view) {
    return {
        ...view[alias$1.ViewBaseConfig],
        ...view[uniqueConstraint.SQLiteViewConfig],
    };
}

exports.BaseSQLiteDatabase = uniqueConstraint.BaseSQLiteDatabase;
exports.Check = uniqueConstraint.Check;
exports.CheckBuilder = uniqueConstraint.CheckBuilder;
exports.ForeignKey = uniqueConstraint.ForeignKey;
exports.ForeignKeyBuilder = uniqueConstraint.ForeignKeyBuilder;
exports.Index = uniqueConstraint.Index;
exports.IndexBuilder = uniqueConstraint.IndexBuilder;
exports.IndexBuilderOn = uniqueConstraint.IndexBuilderOn;
exports.InlineForeignKeys = uniqueConstraint.InlineForeignKeys;
exports.ManualViewBuilder = uniqueConstraint.ManualViewBuilder;
exports.PreparedQuery = uniqueConstraint.PreparedQuery;
exports.PrimaryKey = uniqueConstraint.PrimaryKey;
exports.PrimaryKeyBuilder = uniqueConstraint.PrimaryKeyBuilder;
exports.QueryBuilder = uniqueConstraint.QueryBuilder;
exports.SQLiteAsyncDialect = uniqueConstraint.SQLiteAsyncDialect;
exports.SQLiteBaseInteger = uniqueConstraint.SQLiteBaseInteger;
exports.SQLiteBaseIntegerBuilder = uniqueConstraint.SQLiteBaseIntegerBuilder;
exports.SQLiteBigInt = uniqueConstraint.SQLiteBigInt;
exports.SQLiteBigIntBuilder = uniqueConstraint.SQLiteBigIntBuilder;
exports.SQLiteBlobBuffer = uniqueConstraint.SQLiteBlobBuffer;
exports.SQLiteBlobBufferBuilder = uniqueConstraint.SQLiteBlobBufferBuilder;
exports.SQLiteBlobJson = uniqueConstraint.SQLiteBlobJson;
exports.SQLiteBlobJsonBuilder = uniqueConstraint.SQLiteBlobJsonBuilder;
exports.SQLiteBoolean = uniqueConstraint.SQLiteBoolean;
exports.SQLiteBooleanBuilder = uniqueConstraint.SQLiteBooleanBuilder;
exports.SQLiteColumn = uniqueConstraint.SQLiteColumn;
exports.SQLiteColumnBuilder = uniqueConstraint.SQLiteColumnBuilder;
exports.SQLiteCustomColumn = uniqueConstraint.SQLiteCustomColumn;
exports.SQLiteCustomColumnBuilder = uniqueConstraint.SQLiteCustomColumnBuilder;
exports.SQLiteDelete = uniqueConstraint.SQLiteDelete;
exports.SQLiteDialect = uniqueConstraint.SQLiteDialect;
exports.SQLiteInsert = uniqueConstraint.SQLiteInsert;
exports.SQLiteInsertBuilder = uniqueConstraint.SQLiteInsertBuilder;
exports.SQLiteInteger = uniqueConstraint.SQLiteInteger;
exports.SQLiteIntegerBuilder = uniqueConstraint.SQLiteIntegerBuilder;
exports.SQLiteNumeric = uniqueConstraint.SQLiteNumeric;
exports.SQLiteNumericBuilder = uniqueConstraint.SQLiteNumericBuilder;
exports.SQLiteReal = uniqueConstraint.SQLiteReal;
exports.SQLiteRealBuilder = uniqueConstraint.SQLiteRealBuilder;
exports.SQLiteSelect = uniqueConstraint.SQLiteSelect;
exports.SQLiteSelectBuilder = uniqueConstraint.SQLiteSelectBuilder;
exports.SQLiteSelectQueryBuilder = uniqueConstraint.SQLiteSelectQueryBuilder;
exports.SQLiteSession = uniqueConstraint.SQLiteSession;
exports.SQLiteSyncDialect = uniqueConstraint.SQLiteSyncDialect;
exports.SQLiteTable = uniqueConstraint.SQLiteTable;
exports.SQLiteText = uniqueConstraint.SQLiteText;
exports.SQLiteTextBuilder = uniqueConstraint.SQLiteTextBuilder;
exports.SQLiteTimestamp = uniqueConstraint.SQLiteTimestamp;
exports.SQLiteTimestampBuilder = uniqueConstraint.SQLiteTimestampBuilder;
exports.SQLiteTransaction = uniqueConstraint.SQLiteTransaction;
exports.SQLiteUpdate = uniqueConstraint.SQLiteUpdate;
exports.SQLiteUpdateBuilder = uniqueConstraint.SQLiteUpdateBuilder;
exports.SQLiteView = uniqueConstraint.SQLiteView;
exports.SQLiteViewBase = uniqueConstraint.SQLiteViewBase;
exports.SQLiteViewConfig = uniqueConstraint.SQLiteViewConfig;
exports.Unique = uniqueConstraint.Unique;
exports.UniqueBuilder = uniqueConstraint.UniqueBuilder;
exports.ViewBuilder = uniqueConstraint.ViewBuilder;
exports.ViewBuilderCore = uniqueConstraint.ViewBuilderCore;
exports.blob = uniqueConstraint.blob;
exports.check = uniqueConstraint.check;
exports.customType = uniqueConstraint.customType;
exports.foreignKey = uniqueConstraint.foreignKey;
exports.index = uniqueConstraint.index;
exports.int = uniqueConstraint.int;
exports.integer = uniqueConstraint.integer;
exports.numeric = uniqueConstraint.numeric;
exports.primaryKey = uniqueConstraint.primaryKey;
exports.real = uniqueConstraint.real;
exports.sqliteTable = uniqueConstraint.sqliteTable;
exports.sqliteTableCreator = uniqueConstraint.sqliteTableCreator;
exports.sqliteView = uniqueConstraint.sqliteView;
exports.text = uniqueConstraint.text;
exports.unique = uniqueConstraint.unique;
exports.uniqueIndex = uniqueConstraint.uniqueIndex;
exports.view = uniqueConstraint.view;
exports.alias = alias;
exports.getTableConfig = getTableConfig;
exports.getViewConfig = getViewConfig;
//# sourceMappingURL=index.cjs.map
