import { e as entityKind } from './alias-3edfcde9.mjs';
export { bI as BaseName, C as Column, b0 as ColumnAliasProxyHandler, L as ColumnBuilder, bG as Columns, bK as ExtraConfigBuilder, bu as FakePrimitiveParam, bJ as IsAlias, bq as Many, bx as Name, bp as One, bH as OriginalName, b as Param, bC as Placeholder, Q as QueryPromise, R as Relation, b1 as RelationTableAliasProxyHandler, bo as Relations, S as SQL, bF as Schema, j as SelectionProxyHandler, bw as StringChunk, q as Subquery, r as SubqueryConfig, T as Table, M as TableAliasProxyHandler, bE as TableName, V as View, u as ViewBaseConfig, W as WithSubquery, x as aliasedRelation, G as aliasedTable, w as aliasedTableColumn, E as and, K as applyMixins, bm as asc, bg as between, b3 as bindIfParam, bt as createMany, bs as createOne, c as createTableRelationsHelpers, bn as desc, H as eq, be as exists, a as extractTablesRelationalConfig, f as fillPlaceholders, l as getTableColumns, J as getTableLikeName, p as getTableName, b6 as gt, b7 as gte, b2 as hasOwnEntityKind, bM as iife, bk as ilike, ba as inArray, i as is, by as isDriverValueEncoder, bd as isNotNull, bc as isNull, bv as isSQLWrapper, bL as isTable, bi as like, b8 as lt, b9 as lte, y as mapColumnsInAliasedSQLToAlias, A as mapColumnsInSQLToAlias, g as mapRelationalRow, m as mapResultRow, d as mapUpdateSet, n as name, b4 as ne, bz as noopDecoder, bA as noopEncoder, bB as noopMapper, D as normalizeRelation, b5 as not, bh as notBetween, bf as notExists, bl as notIlike, bb as notInArray, bj as notLike, z as operators, F as or, B as orderByOperators, o as orderSelectedFields, v as param, bD as placeholder, br as relations, s as sql } from './alias-3edfcde9.mjs';
export { D as DrizzleError, T as TransactionRollbackError } from './errors-83565b05.mjs';

class ConsoleLogWriter {
    static [entityKind] = 'ConsoleLogWriter';
    write(message) {
        console.log(message);
    }
}
class DefaultLogger {
    static [entityKind] = 'DefaultLogger';
    writer;
    constructor(config) {
        this.writer = config?.writer ?? new ConsoleLogWriter();
    }
    logQuery(query, params) {
        const stringifiedParams = params.map((p) => {
            try {
                return JSON.stringify(p);
            }
            catch {
                return String(p);
            }
        });
        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';
        this.writer.write(`Query: ${query}${paramsStr}`);
    }
}
class NoopLogger {
    static [entityKind] = 'NoopLogger';
    logQuery() {
        // noop
    }
}

export { ConsoleLogWriter, DefaultLogger, NoopLogger, entityKind };
//# sourceMappingURL=index.mjs.map
